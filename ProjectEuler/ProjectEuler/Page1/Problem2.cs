using Exercises;
using Spectre.Console;
using System.Text.RegularExpressions;

namespace ProjectEuler.Page1;

public static partial class Problem2
{
    private static readonly Lazy<IProblem> instance = new(() => new Problem(
        "problem2",
        "Even Fibonacci Numbers",
        GetInputParsers,
        GetSolvers,
        """
        Each new term in the Fibonacci sequence is generated by adding the previous two terms.
        By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million,
        find the sum of the even-valued terms.
        """,
        new Uri("https://projecteuler.net/problem=2")
    ));

    public static IProblem Instance => instance.Value;

    private static IEnumerable<IProblemInputParser> GetInputParsers()
    {
        yield return new PromptInputParser();
        yield return new StringInputParser();
    }

    private static IEnumerable<IProblemSolver> GetSolvers()
    {
        yield return new NaiveSolver();
    }

    public record Input(int MaxValue) : IProblemInput;

    [GeneratedRegex(@"^\s*((?<max>\d+)\s*)?$")]
    private static partial Regex GetInputRegex();

    public class StringInputParser() :
        ProblemInputParser(
            "string",
            "String input",
            "Parses a string in the format: [max=4000000]. E.g. 1000, 10000"),
        IProblemStringInputParser
    {
        public IProblemInput? Parse(IAnsiConsole console, string input)
        {
            if (GetInputRegex().Match(input) is not {Success: true} match)
            {
                console.MarkupLine("[red]Input is in an invalid format.[/]");
                return null;
            }

            if (match.Groups["max"] is not { Success: true, Value: { } maxValue })
                return new Input(4000000);

            if (!int.TryParse(maxValue, out var max))
            {
                console.MarkupLine("[red]Max value is not a valid integer.[/]");
                return null;
            }

            if (max < 1)
            {
                console.MarkupLine("[red]Max must be a positive integer.[/]");
                return null;
            }

            return new Input(max);
        }
    }

    public class PromptInputParser() :
        ProblemInputParser(
            "prompt",
            "Prompt input",
            "Prompts the user for the maximum value."),
        IProblemPromptInputParser
    {
        public IProblemInput? Prompt(IAnsiConsole console)
        {
            var maxValue = console.Prompt(
                new TextPrompt<int>("Maximum value:")
                    .DefaultValue(4000000)
                    .ValidationErrorMessage("Must be an integer.")
                    .Validate(max => max switch
                    {
                        < 1 => ValidationResult.Error("Must be a positive integer."),
                        _ => ValidationResult.Success()
                    }));

            return new Input(maxValue);
        }
    }

    public record Output(int Amount) : IProblemOutput;

    public class NaiveSolver() :
        ProblemSolver(
            "naive",
            "Naive solver",
            "Iterates through the Fibonacci sequence and sums the even numbers."),
        IProblemOutputSolver
    {
        public IProblemOutput Solve(IProblemInput problemInput)
        {
            var input = (Input)problemInput;

            var amount = 0;
            var a = 1;
            var b = 2;
            while (b <= input.MaxValue)
            {
                if (b % 2 == 0) amount += b;
                var c = a + b;
                a = b;
                b = c;
            }

            return new Output(amount);
        }
    }
}
